-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
ROLLBACK;

BEGIN;

/*
CREATE DATABASE student_project
  WITH OWNER = postgres
  ENCODING = 'UTF8'
  LC_COLLATE = 'en_US.UTF-8'
  LC_CTYPE   = 'en_US.UTF-8'
  TEMPLATE   = template0;
*/
 
CREATE SCHEMA IF NOT EXISTS student_project ;


-- -----------------------------------------------------
-- Table `student_project`.`asignatura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.asignatura
(
    id_asignatura serial NOT NULL,
    nombre_asignatura VARCHAR(100),
    CONSTRAINT asignatura_pkey PRIMARY KEY (id_asignatura)
);

COMMENT ON TABLE student_project.asignatura
    IS 'Tabla con las asignaturas impartidas.';

-- -----------------------------------------------------
-- Table `student_project`.`tutor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.tutor
(
    correo_electronico VARCHAR(100) PRIMARY KEY,
    nombre VARCHAR(100),
    apellidos VARCHAR(100),
    genero VARCHAR(100),
    telefono VARCHAR(25) UNIQUE,
    "NIF" VARCHAR(100) NOT NULL,
    direccion_facturacion VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL
);


COMMENT ON TABLE student_project.tutor
    IS 'Información referente a los tutores legales de los alumnos.';

-- -----------------------------------------------------
-- Table `student_project`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.curso
(
    id_curso serial NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    PRIMARY KEY (id_curso)
);

COMMENT ON TABLE student_project.curso
    IS 'Cursos de los alumnos';

-- -----------------------------------------------------
-- Table `student_project`.`grupo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.grupo
(
    id_grupo serial PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL
);

COMMENT ON TABLE student_project.grupo
    IS 'Grupos de ciudades para tarifas';

-- -----------------------------------------------------
-- Table `student_project`.`pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.pago
(
    id_pago serial PRIMARY KEY,
    id_grupo INT NOT NULL REFERENCES student_project.grupo(id_grupo)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    curso VARCHAR(100) NOT NULL,
    modalidad VARCHAR(100) NOT NULL,
    tipo VARCHAR(100) NOT NULL,
    precio_tutor numeric NOT NULL,
    precio_profesor numeric NOT NULL,
    CONSTRAINT pago_unq UNIQUE (id_grupo, curso, modalidad, tipo)
);

COMMENT ON TABLE student_project.pago
    IS 'Tarifas por curso, modalidad y tipo según grupo';

-- -----------------------------------------------------
-- Table `student_project`.`ciudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.ciudad
(
    id_ciudad serial NOT NULL,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    id_grupo INT NOT NULL REFERENCES student_project.grupo(id_grupo)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    PRIMARY KEY (id_ciudad)
);

COMMENT ON TABLE student_project.ciudad
    IS 'Ciudades donde se imparten clases.';

-- -----------------------------------------------------
-- Table `student_project`.`ubicacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.ubicacion
(
    id_ubicacion serial PRIMARY KEY,
--	Direccion TEXT NOT NULL,
    Distrito VARCHAR(100),
    Barrio VARCHAR(100),
    Codigo_postal VARCHAR(100),
	id_ciudad INT NOT NULL REFERENCES student_project.ciudad(id_ciudad)
    ON DELETE RESTRICT
    ON UPDATE CASCADE		
);

COMMENT ON TABLE student_project.ubicacion
    IS 'Información referente a los alumnos';	


-- -----------------------------------------------------
-- Table `student_project`.`alumno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.alumno
(
    id_alumno serial PRIMARY KEY,
    nombre VARCHAR(100),
    apellidos VARCHAR(100),
    direccion VARCHAR(100),
    NIF VARCHAR(100) NOT NULL,
    telefono VARCHAR(25) UNIQUE,
    genero VARCHAR(100),

        correo_tutor VARCHAR(100) NOT NULL REFERENCES student_project.tutor(correo_electronico)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
        id_curso INT NOT NULL REFERENCES student_project.curso(id_curso)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
	id_ubicacion INT NOT NULL REFERENCES student_project.ubicacion(id_ubicacion)
    ON DELETE RESTRICT
    ON UPDATE CASCADE	
);

COMMENT ON TABLE student_project.alumno
    IS 'Información referente a los alumnos';


-- -----------------------------------------------------
-- Table `student_project`.`profesor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.profesor
(
    id_profesor serial PRIMARY KEY,
    nombre VARCHAR(100),
    apellidos VARCHAR(100),
    genero VARCHAR(100),
    telefono VARCHAR(25) UNIQUE,
    correo_electronico VARCHAR(100) UNIQUE ,
    "NIF" VARCHAR(100),
    direccion_facturacion VARCHAR(100),
    "IBAN" VARCHAR(100),
    carrera VARCHAR(100),
    curso VARCHAR(100),
    experiencia VARCHAR(1000),
    password VARCHAR(255) NOT NULL
);

COMMENT ON TABLE student_project.profesor
    IS 'Información de profesores.';

-- -----------------------------------------------------
-- Table `student_project`.`oferta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.oferta
(
    id_oferta serial PRIMARY KEY,
    fecha_oferta timestamp NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date NOT NULL,
    disponibilidad VARCHAR(1000000) NOT NULL,
    estado VARCHAR(100),
    numero_horas numeric NOT NULL,
    modalidad VARCHAR(100) NOT NULL,
    tipo VARCHAR(100) NOT NULL,
    beneficio_sp numeric NOT NULL,
    ganancia_profesor numeric NOT NULL,
    precio_alumno numeric NOT NULL,
    precio_profesor numeric NOT NULL,
    asignaturas_seleccionadas TEXT NOT NULL,
    anotaciones TEXT,

        id_alumno INT NOT NULL REFERENCES student_project.alumno(id_alumno)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);

COMMENT ON TABLE student_project.oferta
    IS 'Solicitudes de clase creadas por los tutores.';

-- -----------------------------------------------------
-- Table `student_project`.`oferta_asignatura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.oferta_asignatura
(
    id_oferta INT NOT NULL,
    id_asignatura INT NOT NULL,
    PRIMARY KEY (id_oferta, id_asignatura),

	FOREIGN KEY(id_asignatura)  REFERENCES student_project.asignatura(id_asignatura)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,		
	FOREIGN KEY(id_oferta)  REFERENCES student_project.oferta(id_oferta)
    ON DELETE RESTRICT
    ON UPDATE CASCADE		
);

-- -----------------------------------------------------
-- Table `student_project`.`puja`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.puja
(
    id_puja serial PRIMARY KEY,
    fecha_puja date NOT NULL,
    estado_puja VARCHAR(100) DEFAULT 'pendiente',
	id_profesor INT NOT NULL REFERENCES student_project.profesor(id_profesor)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
	id_oferta INT NOT NULL REFERENCES student_project.oferta(id_oferta)
    ON DELETE RESTRICT
    ON UPDATE CASCADE	
);

COMMENT ON TABLE student_project.puja
    IS 'Referente a las pujas que se hacen.';


-- -----------------------------------------------------
-- Table `student_project`.`puja_asignatura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.puja_asignatura
(
    id_puja INT NOT NULL,
    id_asignatura INT  NOT NULL,
    precio numeric NOT NULL,
    PRIMARY KEY (id_puja, id_asignatura),
        FOREIGN KEY (id_asignatura) REFERENCES student_project.asignatura(id_asignatura)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
        FOREIGN KEY (id_puja) REFERENCES student_project.puja(id_puja)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);


-- -----------------------------------------------------
-- Table `student_project`.`enlace_clases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.enlace_clases
(
    id_enlace serial PRIMARY KEY,
    id_alumno INT NOT NULL REFERENCES student_project.alumno(id_alumno)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    id_profesor INT NOT NULL REFERENCES student_project.profesor(id_profesor)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    id_puja INT NOT NULL REFERENCES student_project.puja(id_puja)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    id_oferta INT NOT NULL REFERENCES student_project.oferta(id_oferta)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

COMMENT ON TABLE student_project.enlace_clases
    IS 'Enlaces entre profesores y alumnos asociados a una oferta y puja.';


-- -----------------------------------------------------
-- Table `student_project`.`clase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.clase
(
    id_clase serial PRIMARY KEY,
    fecha_clase date NOT NULL,
    hora_clase time without time zone NOT NULL,
    modalidad_clase VARCHAR(100) NOT NULL,
    precio_total_clase numeric NOT NULL,
    beneficio_clase numeric NOT NULL,
    duracion_clase numeric NOT NULL,
    fecha_registro_clase date NOT NULL,

        id_asignatura INT NOT NULL REFERENCES student_project.asignatura(id_asignatura)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
        id_ubicacion INT NOT NULL REFERENCES student_project.ubicacion(id_ubicacion)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
        id_profesor INT NOT NULL REFERENCES student_project.profesor(id_profesor)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
        id_alumno INT NOT NULL REFERENCES student_project.alumno(id_alumno)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);

COMMENT ON TABLE student_project.clase
    IS 'Información referente a las clases.';

-- -----------------------------------------------------
-- Seed data for cursos y asignaturas
-- -----------------------------------------------------
INSERT INTO student_project.curso (nombre) VALUES ('1º Bachillerato');

INSERT INTO student_project.asignatura (nombre_asignatura) VALUES
    ('Lengua'),
    ('Matemáticas'),
    ('Inglés');

-- -----------------------------------------------------
-- Seed data for grupos y ciudades
-- -----------------------------------------------------
INSERT INTO student_project.grupo (nombre) VALUES ('A'), ('B')
ON CONFLICT (nombre) DO NOTHING;

INSERT INTO student_project.pago (id_grupo, curso, modalidad, tipo, precio_tutor, precio_profesor)
VALUES
    -- Grupo A
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Primaria',     'Online',     'individual', 13,   10),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Primaria',     'Online',     'doble',      24,   15),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Primaria',     'Presencial', 'individual', 15,   12),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Primaria',     'Presencial', 'doble',      24,   15),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'ESO',          'Online',     'individual', 14.5, 11.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'ESO',          'Online',     'doble',      27,   18),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'ESO',          'Presencial', 'individual', 16.5, 13),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'ESO',          'Presencial', 'doble',      27,   18),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Bachillerato', 'Online',     'individual', 16,   12.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Bachillerato', 'Online',     'doble',      29,   20),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Bachillerato', 'Presencial', 'individual', 17.5, 14),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A'), 'Bachillerato', 'Presencial', 'doble',      29,   20),
    -- Grupo B
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Primaria',            'Online',     'individual', 11.5, 9),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Primaria',            'Online',     'doble',      18.5, 12.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Primaria',            'Presencial', 'individual', 11.5, 9),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Primaria',            'Presencial', 'doble',      18.5, 12.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'ESO',                 'Online',     'individual', 12.5, 10),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'ESO',                 'Online',     'doble',      23,   15),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '1º y 2º ESO',         'Presencial', 'individual', 13,   10),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '1º y 2º ESO',         'Presencial', 'doble',      23,   15),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '3º y 4º ESO',         'Presencial', 'individual', 13.5, 10.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '3º y 4º ESO',         'Presencial', 'doble',      23,   15),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Bachillerato',        'Online',     'individual', 13,   10),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), 'Bachillerato',        'Online',     'doble',      25,   17),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '1º Bachillerato',     'Presencial', 'individual', 14,   11),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '1º Bachillerato',     'Presencial', 'doble',      25,   17),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '2º Bachillerato',     'Presencial', 'individual', 14.5, 11.5),
    ((SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'), '2º Bachillerato',     'Presencial', 'doble',      25,   17)
ON CONFLICT DO NOTHING;

INSERT INTO student_project.ciudad (nombre, id_grupo) VALUES
    ('Albacete',                (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Alicante/Alacant',        (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Almería',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Araba/Álava',             (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Asturias',                (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Ávila',                   (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Badajoz',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Balears, Illes',          (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Barcelona',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Bizkaia',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Burgos',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Cáceres',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Cádiz',                   (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Cantabria',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Castellón/Castelló',      (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Ciudad Real',             (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Córdoba',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Coruña, A',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Cuenca',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Gipuzkoa',                (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Girona',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Granada',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Guadalajara',             (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Huelva',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Huesca',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Jaén',                    (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('León',                    (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Lleida',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Lugo',                    (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Madrid',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Málaga',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Murcia',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Navarra',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Ourense',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Palencia',                (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Palmas, Las',             (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Pontevedra',              (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Rioja, La',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Salamanca',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Santa Cruz de Tenerife',  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Segovia',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Sevilla',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Soria',                   (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Tarragona',               (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Teruel',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Toledo',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Valencia/València',       (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'A')),
    ('Valladolid',              (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Zamora',                  (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Zaragoza',                (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Ceuta',                   (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B')),
    ('Melilla',                 (SELECT id_grupo FROM student_project.grupo WHERE nombre = 'B'))
ON CONFLICT (nombre) DO NOTHING;
-- -----------------------------------------------------
-- Table `student_project`.`saldo_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS student_project.saldo_usuario (
    user_id VARCHAR(100) NOT NULL,
    rol VARCHAR(20) NOT NULL,
    saldo numeric NOT NULL DEFAULT 0,
    PRIMARY KEY (user_id, rol)
);

COMMENT ON TABLE student_project.saldo_usuario
    IS 'Saldo acumulado por usuario para pagos a liquidar.';
